{"version":3,"sources":["components/App/index.js","serviceWorker.js","components/ThemeProvider/customTheme.js","components/ThemeProvider/index.js","index.js"],"names":["App","Stack","spacing","bg","p","borderRadius","Heading","as","size","color","Text","fontSize","Button","variantColor","isFullWidth","Boolean","window","location","hostname","match","customTheme","theme","colors","primary","Theme","props","ThemeProvider","CSSReset","children","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAqBeA,EAjBH,kBACV,6BACE,mCACA,kBAACC,EAAA,EAAD,CAAOC,QAAS,EAAGC,GAAG,kBAAkBC,EAAG,EAAGC,aAAa,MACzD,kBAACC,EAAA,EAAD,CAASC,GAAG,KAAKC,KAAK,KAAKC,MAAM,mBAAjC,qBAGA,kBAACC,EAAA,EAAD,CAAMH,GAAG,IAAII,SAAS,KAAKF,MAAM,kBAAjC,0CAGA,kBAACG,EAAA,EAAD,CAAQC,aAAa,UAAUC,aAAW,GAA1C,wBCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCGSC,EAnBE,eACZC,IADY,CAEfC,OAAO,eACFD,IAAMC,OADL,CAEJC,QAAS,CAEP,UAAW,UACX,UAAW,UACX,SAAU,UACV,SAAU,UACV,SAAU,UACV,SAAU,UACV,QAAS,UACT,UAAW,UACX,UAAW,eCLFC,EAPD,SAACC,GAAD,OACZ,kBAACC,EAAA,EAAD,CAAeL,MAAOD,GACpB,kBAACO,EAAA,EAAD,MACCF,EAAMG,WCCXC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.233efc7d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Button, Heading, Stack, Text } from '@chakra-ui/core';\r\n\r\nconst App = () => (\r\n  <div>\r\n    <h1>App</h1>\r\n    <Stack spacing={4} bg='primary.white-2' p={8} borderRadius='lg'>\r\n      <Heading as='h1' size='md' color='primary.black-1'>\r\n        Chakra UI is rad!\r\n      </Heading>\r\n      <Text as='p' fontSize='md' color='primary.gray-1'>\r\n        Here are your first Chakra components:\r\n      </Text>\r\n      <Button variantColor='primary' isFullWidth>\r\n        Click me, please!\r\n      </Button>\r\n    </Stack>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { theme } from '@chakra-ui/core';\r\n\r\nconst customTheme = {\r\n  ...theme,\r\n  colors: {\r\n    ...theme.colors,\r\n    primary: {\r\n      // TODO: finalize custom colors\r\n      'black-1': '#000000',\r\n      'black-2': '#333333',\r\n      'blue-1': '#2F80ED',\r\n      'gray-1': '#BDBDBD',\r\n      'gray-2': '#828282',\r\n      'gray-3': '#4F4F4F',\r\n      'red-1': '#EB5757',\r\n      'white-1': '#FFFFFF',\r\n      'white-2': '#E0E0E0',\r\n    },\r\n  },\r\n};\r\n\r\nexport default customTheme;\r\n","import React from 'react';\r\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core';\r\nimport customTheme from './customTheme';\r\n\r\nconst Theme = (props) => (\r\n  <ThemeProvider theme={customTheme}>\r\n    <CSSReset />\r\n    {props.children}\r\n  </ThemeProvider>\r\n);\r\n\r\nexport default Theme;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport ThemeProvider from './components/ThemeProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}